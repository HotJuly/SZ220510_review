1.key值的使用方式
	当使用数据进行遍历渲染的时候,我们会得到多个节点,需要给这些节点都添加上唯一标识key属性

2.常用作key值的数据
	1.遍历得到的数据身上的唯一标识,例如:id,vid等
	2.遍历得到的数据的下标,也就是index
	3.遍历得到的数据本身
		前提:数据必须是基本数据类型

3.key值的作用
	与diff算法有关
	当遍历的数据发生变化的时候,Vue会根据最新的数据生成全新的虚拟DOM,并与旧的虚拟DOM进行比较,找出可以复用的DOM
		而key就是比较重的关键数据

	diff算法的目的,减少不必要的真实DOM的创建

	first render:
		1.将组件的模板编译成render函数
			render函数被调用就会返回虚拟DOM
		2.将当前最新的数据传入到render函数中,返回虚拟DOM树
		3.根据虚拟DOM树,生成真实DOM树
		4.将真实DOM树,替换掉页面上el元素,实现挂载操作
		5.最终GUI线程根据最新的DOM结构,渲染页面

		注意:首次渲染中没有diff算法参与

	update render:
		1.将当前最新的数据传入render函数中,生成全新的虚拟DOM树
		2.比较新旧两棵虚拟DOM树,找到其中可以复用的真实DOM
		3.如果没有找到相同的虚拟DOM,那么生成全新的真实DOM
		4.经过流程2和3,当前所有的虚拟DOM上都会对应的真实DOM
		5.将得到的最新的真实DOM树,替换掉页面上组件对应的区域
		6.最终GUI线程根据最新的DOM结构,渲染页面

		注意:
			1.流程2和3就是所谓diff算法
			2.diff算法的比较是同层比较,不会去进行深度比较,否则代码将会出现性能问题
				如果同级中没有可以复用的,就直接创建全新的

4.使用下标作为key值可能出现的问题?
	只要不去修改遍历的数据,那么首次渲染中是没有diff算法参与的,用下标作为key值是没有问题的

	input案例
		这个案例中,diff算法有比较节点,也有复用节点,但是最终由于用index作为key,导致节点复用出错
		
	商品排序案例
		这个案例中,diff算法有比较节点,没有成功复用节点,最终本来都可以复用的节点,由于key值问题,导致所有节点都复用失败,最终全部生成全新的真实DOM
			虽然项目能够展示成功,但是此处diff算法不仅没有优化性能,反而劣化性能

5.使用唯一标识作为key值的好处是什么?
	只要服务器返回的数据不发生变化,前端的真实DOM就可以一直复用下去
		










